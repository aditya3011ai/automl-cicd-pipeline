name: CI/CD Pipeline with EC2 Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint check
        run: |
          pip install flake8
          flake8 . --exclude=venv --max-line-length=100 || echo "Lint warnings"

      - name: Run train script
        run: |
          python src/train.py

      - name: Build Docker image
        run: |
          docker build -t automl-api .

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          HOST="${{ secrets.EC2_HOST }}"
          HOST_DOMAIN=$(echo "$HOST" | cut -d@ -f2)
          ssh-keyscan -H "$HOST_DOMAIN" >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "$EC2_HOST" << 'EOF'
            set -e
            cd ~/automl-cicd-pipeline
            git pull origin main
            docker build -t automl-api .
            docker stop automl-api || true
            docker rm automl-api || true
            docker run -d --name automl-api -p 8000:8000 automl-api
            EOF
